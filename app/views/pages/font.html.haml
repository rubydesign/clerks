%h1 Fonts

%p
  A little exercise in generating numbers, copied from three example.
  Only the bevel and text can be changed (by just typing).
  Then download and do the rest in slicer.

= javascript_include_tag "three_all"
:javascript
  let font_asset = "#{asset_path('oleo.json')}" ;

#info
  type to enter new text, drag to spin the text
  %br/
  %button#bevel add bevel
  %button#exportBinary export binary


:javascript

  THREE.Cache.enabled = true;

  let camera, cameraTarget, scene, renderer;

  let group, textMesh1, textGeo, materials;

  let firstLetter = true;

  let text = "0123456789",    font = undefined;

  let  bevelThickness = 2, bevelSize = 2 , curveSegments = 8;
  const height = 20, size = 50;

  init();
  animate();

  function init() {

    // CAMERA

    camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 1500 );
    camera.position.set( 0, 400, 700 );

    cameraTarget = new THREE.Vector3( 0, 150, 0 );

    // SCENE

    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x000000 );

    // LIGHTS
    const light = new THREE.AmbientLight( 0x404040 , 1.5); // soft white light
    scene.add( light );
    const pointLight = new THREE.PointLight( 0xffffff, 1.5 );
    pointLight.position.set( 0, 100, 90 );
    pointLight.color.setHSL( Math.random(), 1, 0.5 );
    scene.add( pointLight );

    materials = [
      new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } ), // front
      new THREE.MeshPhongMaterial( { color: 0xffffff } ) // side
    ];

    group = new THREE.Group();
    group.position.y = 100;

    scene.add( group );

    loadFont();

    // RENDERER

    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );

    const controls = new THREE.OrbitControls( camera, renderer.domElement );

    controls.maxPolarAngle = Math.PI * 0.5;
    controls.minDistance = 100;
    controls.maxDistance = 50000;

    document.body.appendChild( renderer.domElement );

    document.addEventListener( 'keypress', onDocumentKeyPress, false );
    document.addEventListener( 'keydown', onDocumentKeyDown, false );

    add_bevel = document.getElementById( "bevel" )
    add_bevel.addEventListener( 'click', function () {
      bevelThickness = bevelThickness + 0.5;
      bevelSize = bevelSize + 0.5;
      curveSegments = curveSegments + 1;
      refreshText();

    }, false );

    window.addEventListener( 'resize', onWindowResize, false );

  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
  }

  function onDocumentKeyDown( event ) {

    if ( firstLetter ) {

      firstLetter = false;
      text = "";

    }

    const keyCode = event.keyCode;

    // backspace

    if ( keyCode == 8 ) {

      event.preventDefault();

      text = text.substring( 0, text.length - 1 );
      refreshText();

      return false;

    }

  }

  function onDocumentKeyPress( event ) {

    const keyCode = event.which;

    // backspace

    if ( keyCode == 8 ) {

      event.preventDefault();

    } else {

      const ch = String.fromCharCode( keyCode );
      text += ch;

      refreshText();

    }

  }

  function loadFont() {

    const loader = new THREE.FontLoader();
    loader.load( font_asset, function ( response ) {

      font = response;

      refreshText();

    } );

  }

  function createText() {

    textGeo = new THREE.TextGeometry( text, {

      font: font,

      size: size,
      height: height,
      curveSegments: curveSegments,

      bevelThickness: bevelThickness,
      bevelSize: bevelSize,
      bevelEnabled: true

    } );

    textGeo.computeBoundingBox();
    textGeo.computeVertexNormals();

    const triangle = new THREE.Triangle();

    const centerOffset = - 0.5 * ( textGeo.boundingBox.max.x - textGeo.boundingBox.min.x );

    textGeo = new THREE.BufferGeometry().fromGeometry( textGeo );

    textMesh1 = new THREE.Mesh( textGeo, materials );

    textMesh1.position.x = centerOffset;
    textMesh1.position.y = 0;

    group.add( textMesh1 );

  }

  function refreshText() {
    group.remove( textMesh1 );
    if ( ! text ) return;
    createText();
  }

  function animate() {
    requestAnimationFrame( animate );
    render();
  }

  function render() {
    renderer.clear();
    renderer.render( scene, camera );
  }

  exporter = new STLExporter();
  const buttonExportBinary = document.getElementById( 'exportBinary' );
  buttonExportBinary.addEventListener( 'click', exportBinary );

  function exportBinary() {
    const result = exporter.parse( textMesh1, { binary: true } );
    saveArrayBuffer( result, 'numbers.stl' );
  }

  const link = document.createElement( 'a' );
  link.style.display = 'none';
  document.body.appendChild( link );

  function save( blob, filename ) {

    link.href = URL.createObjectURL( blob );
    link.download = filename;
    link.click();

  }

  function saveArrayBuffer( buffer, filename ) {

    save( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );

  }
