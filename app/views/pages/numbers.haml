%h1 Fonts

%p
  A little exercise in generating numbers, copied from three example.
  Only the bevel and text can be changed (by just typing).
  Then download and do the rest in slicer.

.row
  .canvas_container
    %canvas#viewer

  #info
    type to enter new text, drag to spin the text
    %br/
    %button#less_bevel less bevel
    %button#more_bevel more bevel
    %button#exportBinary export binary

= javascript_include_tag "three_all"
:javascript
  let font_asset = "#{asset_path('oleo.json')}" ;
  let firstLetter = true;

  let text = "123456789",    font = undefined;

  let  bevelThickness = 3, bevelSize = 3 , curveSegments = 8;
  const height = 20, size = 80;


  function loadFont() {
    const loader = new THREE.FontLoader();
    loader.load( font_asset, function ( response ) {
      font = response;
      refreshText();
    } );

  }

  function createText() {
    textGeo = new THREE.TextGeometry( text, {

      font: font,
      size: size,
      height: height,
      curveSegments: curveSegments,
      bevelThickness: bevelThickness,
      bevelSize: bevelSize,
      bevelEnabled: true
    } );

    textGeo.computeBoundingBox();
    textGeo.computeVertexNormals();

    const centerOffset = - 0.5 * ( textGeo.boundingBox.max.x - textGeo.boundingBox.min.x );

    textGeo = new THREE.BufferGeometry().fromGeometry( textGeo );

    main_mesh = new THREE.Mesh( textGeo, materials );

    main_mesh.position.x = centerOffset;
    main_mesh.position.y = 0;

    group.add( main_mesh );

  }

  function refreshText() {
    group.remove( main_mesh );
    if ( ! text ) return;
    createText();
    render();
  }

  loadFont();
  init();
  animate();

  //UI fromm here on
  function onDocumentKeyDown( event ) {
    if ( firstLetter ) {
      firstLetter = false;
      text = "";
    }
    const keyCode = event.keyCode;
    // backspace
    if ( keyCode == 8 ) {
      event.preventDefault();
      text = text.substring( 0, text.length - 1 );
      refreshText();
      return false;
    }
  }

  function onDocumentKeyPress( event ) {
    const keyCode = event.which;
    // backspace
    if ( keyCode == 8 ) {
      event.preventDefault();
    } else {
      const ch = String.fromCharCode( keyCode );
      text += ch;
      refreshText();
    }
  }
  document.addEventListener( 'keypress', onDocumentKeyPress, false );
  document.addEventListener( 'keydown', onDocumentKeyDown, false );
  more_bevel = document.getElementById( "more_bevel" )
  more_bevel.addEventListener( 'click', function () {
    bevelThickness = bevelThickness + 0.5;
    bevelSize = bevelSize + 0.5;
    curveSegments = curveSegments + 1;
    refreshText();
  }, false );
  less_bevel = document.getElementById( "less_bevel" )
  less_bevel.addEventListener( 'click', function () {
    bevelThickness = bevelThickness - 0.5;
    bevelSize = bevelSize - 0.5;
    curveSegments = curveSegments - 1;
    refreshText();
  }, false );
