%h1= params[:id].gsub("_"," ").capitalize

%p
  = @text
  %br
  See all 3d designs at
  = link_to "here" , kolme_d_url(:index)
.row
  .canvas_container
    %canvas#viewer
  #info_container
    #info
      %range-slider{"v-model":"radius0" , ":min":"0", ":max":"200" ,
                    ":step": "1"} Radius 0 {{radius0}}
      -if(@data[:radius25])
        %range-slider{"v-model":"radius25" , ":min":"0", ":max":"200" ,
                      ":step": "1"} Radius at 25% {{radius25}}
        %range-slider{"v-model":"radius50" , ":min":"0", ":max":"200" ,
                      ":step": "1"} Radius at 50% {{radius50}}
        %range-slider{"v-model":"radius75" , ":min":"0", ":max":"200" ,
                      ":step": "1"} Radius at 75% {{radius75}}
      %range-slider{"v-model":"radius100" , ":min":"0", ":max":"200" ,
                    ":step": "1"} Radius at 100% {{radius100}}
      %range-slider{"v-model":"height" , ":min":"10", ":max":"400" ,
                    ":step": "1"} Lamp height {{height}}
      %range-slider{"v-model":"heightSegments" , ":min":"1", ":max":"100" ,
                    ":step": "1"} height Segments {{heightSegments}}
      %range-slider{"v-model":"radialSegments" , ":min":"3", ":max":"100" ,
                    ":step": "1"} radial Segments {{radialSegments}}
      -if( @data[:twist] )
        %range-slider{"v-model":"twist" , ":min":"0", ":max":"360" ,
                      ":step": "15"} Twist degrees {{twist}}
    %button#exportBinary export binary

= javascript_include_tag "three_all"
:ruby2js
  part_name = "#{params[:id]}.stl"
  simple = 0
  def radius( x , y)
    return Math.sqrt( x*x + y*y)
  end
  def bezier_transform(simple)
      data = Simple._data;
      bez = bezier(-data.height/2 , data.radius100 ,
                    -data.height/4 , data.radius75 ,
                     0 , data.radius50 ,
                     data.height/4 , data.radius25 ,
                     data.height/2 , data.radius0);
      curve = bez.curve(data.heightSegments + 1 )
      # apply the bezier (radiusXX) to the radius of each vertex
      simple.vertices.each do |vertex|
        old_radius = radius(vertex.x , vertex.z)
        curve_index = Math.round(data.heightSegments/2 +  data.heightSegments * vertex.y / data.height)
        ratio = curve.CURV[curve_index][1] / old_radius
        vertex.x = ratio * vertex.x
        vertex.z = ratio * vertex.z
      end
  end
  def twist_transform(simple)
    data = Simple._data;
    #twist the cone around it's y axis by "twist" amount (of degrees)
    simple.vertices.each do |vertex|
      rad = (Math.PI * data.twist * vertex.y) / (data.height * 180)
      old_x = vertex.x
      old_z = vertex.z
      vertex.x = old_x * Math.cos(rad) - old_z * Math.sin(rad)
      vertex.z = old_z * Math.cos(rad) + old_x * Math.sin(rad)
    end
  end

  def createMesh
    data = Simple._data;
    simple =  new THREE.CylinderGeometry(
              data.radius0,
              data.radius100,
              data.height,
              data.radialSegments,
              data.heightSegments ,
              true    )
    bezier_transform(simple) if data.radius25
    twist_transform(simple) if data.twist
    simple.computeFlatVertexNormals()
    geo = new THREE.BufferGeometry().fromGeometry(simple)
    return new THREE.Mesh( geo, material )
  end

  init()
  animate()

  class Simple < Vue
    el '#info'
    def initialize
      return #{@data.to_json.html_safe}
    end
    def watch()
     {"_data": { handler:  lambda{refreshMesh();updateU()}  , deep: true}}
    end
  end

  refreshMesh()
