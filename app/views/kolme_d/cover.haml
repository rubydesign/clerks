%h1= @header

%p
  = @text
  %br
  See all 3d designs at
  = link_to "here." , kolme_d_url(:index)
  If you edit, a permalink is renerated that you can share or save.

.row
  .canvas_container
    %canvas#viewer
  #info_container
    #info
      %range-slider{"v-model":"radius_min" , ":min":"5", ":max":"50" ,
                    ":step": "1"} Radius hole {{radius_min}}
      %range-slider{"v-model":"radius_max" , ":min":"100", ":max":"240" ,
                  ":step": "1"} Radius total {{radius_max}}
      %range-slider{"v-model":"height" , ":min":"1", ":max":"400" ,
                    ":step": "1"} Lamp height {{height}}

      %range-slider{"v-model":"waves" , ":min":"1", ":max":"20" ,
                    ":step": "1"} Waves {{waves}}

      %range-slider{"v-model":"sin_scale" , ":min":"0.1", ":max":"10" ,
                    ":step": "0.1"} Sin Scale {{sin_scale}}

      %range-slider{"v-model":"offset" , ":min":"1", ":max":"100" ,
                    ":step": "1"} Offset {{offset}}
      %range-slider{"v-model":"slope" , ":min":"0.1", ":max":"5" ,
                    ":step": "0.1"} Slope {{slope}}

      %range-slider{"v-model":"heightSegments" , ":min":"10", ":max":"300" ,
                    ":step": "1"} height Segments {{heightSegments}}
      %range-slider{"v-model":"radialSegments" , ":min":"3", ":max":"100" ,
                    ":step": "1"} radial Segments {{radialSegments}}
    %button#exportBinary export binary

= javascript_include_tag "three_all"
:ruby2js
  part_name = "#{params[:id]}.stl"
  simple = 0
  def radius( x , y)
    return Math.sqrt( x*x + y*y)
  end
  def wave_transform(simple)
      data = Simple._data;
      simple.vertices.each do |vertex|
        dist = vertex.x * vertex.x + vertex.y * vertex.y
        cos =  Math.cos( (Math.PI * dist * data.waves) / (data.radius_max * data.radius_max) )
        cos = 1 + (cos / data.sin_scale)
        console.log "dist   " + Math.sqrt(dist)
        dist = Math.sqrt(dist)
        console.log " cos    " + cos
        cos = cos
        scale = data.height * cos * data.offset / (data.offset*data.slope + (dist))
        console.log " scale " + scale
        vertex.z = scale
      end
  end

  def createMesh
    data = Simple._data;
    simple =  new THREE.RingGeometry(
              data.radius_min,
              data.radius_max,
              data.radialSegments,
              data.heightSegments  )
    wave_transform(simple)
    simple.computeFlatVertexNormals()
    geo = new THREE.BufferGeometry().fromGeometry(simple)
    return new THREE.Mesh( geo, material )
  end

  init()
  animate()

  class Simple < Vue
    el '#info'
    def initialize
      return #{@data.to_json.html_safe}
    end
    def watch()
     {"_data": { handler:  lambda{refreshMesh()}  , deep: true}}
    end
  end
  def export_stl2
    export_stl(true)
  end

  refreshMesh()
  document.getElementById( 'exportBinary' ).addEventListener( 'click', export_stl2 );
