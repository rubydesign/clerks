%h1 Text

%p
  A little exercise in generating numbers, copied from three example.
  Properties can be changed by sliders,
  then download (export) and do the rest in slicer.
  %br
  See all 3d designs at
  = link_to "here" , kolme_d_url(:index)
.row
  .canvas_container
    %canvas#viewer

  #info_container
    #info
      %input{ "v-model":"text"}
      %range-slider{"v-model":"bevelThickness" , ":min":"2", ":max":"11" ,
                    ":step": "0.5"} Bevel Thickness {{bevelThickness}}
      %range-slider{"v-model":"bevelSize" , ":min":"2", ":max":"11" ,
                    ":step": "0.5"} Bevel Size {{bevelSize}}
      %range-slider{"v-model":"size" , ":min":"20", ":max":"100" ,
                    ":step": "2"} Font Size {{size}}
      %range-slider{"v-model":"height" , ":min":"10", ":max":"30" ,
                    ":step": "1"} Font Height {{height}}
    %button#exportBinary export binary

= javascript_include_tag "three_all"
:javascript
  part_name = "numbers.stl"
  let font_asset = "#{asset_path('oleo.json')}" ;
  let firstLetter = true;
  let text = "123456789",    font = undefined;
  let curveSegments = 8;

  function loadFont() {
    const loader = new THREE.FontLoader();
    loader.load( font_asset, function ( response ) {
      font = response;
      refreshMesh();
    } );

  }

  function createMesh() {
    textGeo = new THREE.TextGeometry( Numbers._data.text, {
      font: font,
      size: Numbers._data.size,
      height: Numbers._data.height,
      curveSegments: curveSegments,
      bevelThickness: Numbers._data.bevelThickness,
      bevelSize: Numbers._data.bevelSize,
      bevelEnabled: true
    } );
    textGeo.computeBoundingBox();
    textGeo.computeVertexNormals();
    const centerOffset = - 0.5 * ( textGeo.boundingBox.max.x - textGeo.boundingBox.min.x );
    textGeo = new THREE.BufferGeometry().fromGeometry( textGeo );
    mesh = new THREE.Mesh( textGeo, material );
    mesh.position.x = centerOffset;
    mesh.position.y = 0;
    return mesh;
  }

  loadFont();
  init();
  animate();

:ruby2js
  class Numbers < Vue
    el '#info'

    def initialize
      @orbital = false
      @bevelThickness = 3
      @text = "1 2 3 4 5"
      @bevelSize = 3
      @size = 50
      @height = 20
    end
  end
:javascript
  Numbers.$watch("_data" ,  refreshMesh  , {deep: true})
