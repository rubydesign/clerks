%script{'type'=>"text/x-template", id: 'table-component'}
  %table.table.table-striped.table-sm
    %thead
      %th{ "v-for" => "id in column_order" ,
           "@click" => "sortBy(id)",
           ":class" => "{ active: sortKey == id }"}
        {{columns[id]['name']}}
        %span.arrow{":class" => "sortOrders[id] > 0 ? 'asc' : 'dsc'" ,
                    "v-if" => "columns[id]['sortable'] != false"}
        %input{:category => "query", "v-model" => "queries[id]" , "v-if": "columns[id].searchable"}
    %tbody
      %tr{"v-for": "row in filteredData"}
        %td{ "v-for": "id in column_order"}
          %slot{ ":name": "id" , "slot-scope": "row" , ":object": "row"}
            {{ row[id] }}
      %slot{name: "last"}
:ruby2js
  class TableComponent < Vue
    template "#table-component"
    props [:columns, :table_data ,:column_order]
    def initialize
      @sortOrders = {}
      @queries = {}
      self.column_order.each do |c|
        @sortOrders[c] = 1
        @queries[c] = ""
      end
      @sortKey = ""
    end
    def sortBy(key)
      return if this.columns[key][:sortable] == false
      @sortKey = key;
      @sortOrders[key] = @sortOrders[key] * -1;
    end
    def filteredData
      dat = this.table_data
      this.column_order.each do |col|
        query = @queries[col].toLowerCase()
        next unless @queries[col].length > 0
        dat = dat.filter do |item|
          return item[col].toLowerCase().indexOf(query) > -1
        end
      end
      if(@sortKey)
        order = @sortOrders[@sortKey] || 1
        type = self.columns[@sortKey]['type']
        dat = dat.slice().sort do |a, b|
          aa = a[@sortKey]
          bb = b[@sortKey]
          if( type == "Number")
            aa = parseFloat(aa)
            bb = parseFloat(bb)
          end
          return (aa === bb ? 0 : aa > bb ? 1 : -1) * order
        end
      end
      return dat
    end
  end
