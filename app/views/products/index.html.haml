.row.product_index_start
  .col-md-9.products
    .row
      .col-md-10
        %h2
          - if params[:basket]
            %br
            %br
            %br
            = t(:choose_product_for_basket)
          -else
            = t(:products)
        = paginate @products
      .col-md-2
        = link_to  t(:new) + ' ' + t(:product) , new_product_path , :class => "btn btn-primary"
  .col-md-3
    = image_tag "ruby_clerks/products.jpg" , :class => "img-responsive"

.row
  .col-md-9
    %div
      %table.table.table-striped.table-sm
        %thead
          %tr
            %th
              = sort_link [:office,@q], :position
              = sort_link [:office,@q], :scode
            %th
              = sort_link [:office,@q], :name
              %span.right
                %label= t(:vat)
                %input{:type => "radio", "v-model" => "alv", :value => "true"}/
                %label 0%
                %input{:type => "radio", "v-model" => "alv", :value => "false"}/
            %th
              = sort_link [:office,@q], :price
              = sort_link [:office,@q], :cost
            %th
              =t(:supplier)
              =t(:category)
            %th
              = sort_link [:office,@q], :inventory
              = t(:in_orders) if(available_inventory)
              = sort_link [:office,@q], :stock_level , t(:stock_level).split.first
              = sort_link [:office,@q], :pack_unit
        %tbody
          - @products.each do |product|
            %tr{:class => "line-#{cycle("1","2")}"}
              %td
                = product.position
                = product.scode
              %td.name
                = link_to product_path(product), :title => t(:show) do
                  =product.name
              %td
                %span.euro {{ price_for(#{product.id}) }}
                \|
                %span.euro {{ cost_for(#{product.id}) }}
              %td.supplier
                =product.supplier.supplier_name if product.supplier
                =product.category.name if product.category
              %td.inventory
                - if(available_inventory )
                  = "#{product.inventory - @product_inventory[product.id]} / #{@product_inventory[product.id]} "
                - else
                  = product.inventory
                \|
                = product.stock_level
                \|
                = product.pack_unit
                -if params[:basket]
                  = link_to t(:add_to_basket) , edit_basket_path(:id => params[:basket] , :add => product.id)
      .btn-toolbar.row
        .btn-group.pull-left
          = paginate @products
        %ul.pagination.csv
          %li
            = link_to "CSV",products_path({:format => :csv}.merge( params.to_unsafe_h))
  .col-md-3
    = search_form_for @q, :html => { :class => "form-horizontal" }, :method => :get do |f|
      .form-group
        .input
          - if params[:basket]
            = hidden_field_tag :basket , params[:basket]
            = f.text_field :name_cont, :class => "form-control" , :placeholder => t(:name)
          -else
            = f.text_field :name_cont, :class => "form-control" , :placeholder => t(:name)
      .form-group.row
        .col-md-12
          .input-group
            .input-group-addon
              =t(:in_orders)
              = radio_button_tag :in_orders , true , available_inventory

      .form-group
        .input-group
          = f.text_field :summary_cont , :class => "form-control" , :placeholder => t(:summary)
          %span.input-group-addon
            =t(:blanks)
            = f.radio_button :summary_blank , true
      .form-group
        .input-group
          = f.text_field :description_cont , :class => "form-control" , :placeholder =>  t(:description)
          %span.input-group-addon
            =t(:blanks)
            = f.radio_button :description_blank , true
      .form-group.row
        .col-md-6
          = f.text_field :ean_cont , :class => "form-control" , :placeholder => t(:ean)
        .col-md-6
          = f.text_field :scode_cont , :class => "form-control" , :placeholder => t(:scode)
      .form-group.row
        .col-md-4
          = f.label(:price)
        .col-md-4
          = f.text_field :price_gteq , :class => "form-control"
        .col-md-4
          = f.text_field :price_lteq , :class => "form-control"
        .col-md-4
          = f.label(:cost)
        .col-md-4
          = f.text_field :cost_gteq , :class => "form-control"
        .col-md-4
          = f.text_field :cost_lteq , :class => "form-control"
        .col-md-4
          = f.label(:inventory)
        .col-md-4
          = f.text_field :inventory_gteq , :class => "form-control"
        .col-md-4
          = f.text_field :inventory_lteq , :class => "form-control"
        .col-md-4
          = f.label(:stock_level)
        .col-md-4
          = f.text_field :stock_level_gteq , :class => "form-control"
        .col-md-4
          = f.text_field :stock_level_lteq , :class => "form-control"
        .col-md-4{style: "clear: left;"}
          = f.label(:pack_unit)
        .col-md-4
          = f.text_field :pack_unit_gteq , :class => "form-control"
        .col-md-4
          = f.text_field :pack_unit_lteq , :class => "form-control"
      .form-group.row
        .col-md-4
          = f.label t(:supplier)
        .col-md-8
          = f.collection_select :supplier_id_eq, Supplier.all, :id, :supplier_name, {:include_blank => true}, :class=>"form-control"
      .form-group.row
        .col-md-4
          = f.label t(:category)
        .col-md-8
          = f.collection_select :category_id_eq, Category.all, :id, :name, {:include_blank => true}, :class=>"form-control"
      = f.submit t(:filter), :class => "btn btn-success" , :id => :filter
      = link_to  t(:cancel), products_path, :class => "btn btn-warning"
.product_index_end
:ruby2js
  class ProductMethods < Vue
    options el: '.table'
    def initialize
      @products = #{@products.to_json(only: [:id , :price , :cost , :tax]).html_safe}
      @alv = "true"
    end
    def attribute_for(id , attribute)
      product = this.products.find { |product| return product.id == id }
      return id unless product
      num = product[attribute]
      num = 100 * num / (100 + product.tax) if( self.alv == "false")
      return num.toFixed(2)
    end
    def cost_for(id)
      return this.attribute_for(id , "cost")
    end
    def price_for(id)
      return this.attribute_for(id , "price")
    end
  end
