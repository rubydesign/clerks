.row.purchase-app
  .col-md-6.purchases
    %h2= in_place @purchase , :name
  .col-md-2.pill{ "v-bind:class" => "{active_pill: tab == 1}"}
    %h6
      %a{"@click" => "tab = 1"}= t(:basket)
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 2}"}
    %h6
      %a{"@click" => "tab = 2"}= t(:products)
      \&nbsp;
      %a.right{"@click" => "products_to_basket"}
        =image_tag "plus.png" , width: "20px"
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 3}"}
    %h6
      %a{"@click" => "tab = 3"}=t(:orders)
      \&nbsp;
      %a.right{"@click" => "orders_to_basket"}
        =image_tag "plus.png" , width: "20px"

  .col-md-12.tab.basket{"v-bind:class" => "{active_tab: tab == 1}"}
    %table-component{ ":columns": "basket_columns" ,
                      ":table_data": "basket.items",
                      ":column_order": "basket_order"}
      %template{ slot: "name" , "slot-scope" => "row"}
        %a{ ":href" => "'/products/' + row.object.product_id"}
          {{row.object.name}}
      %template{ slot: "quantity" , "slot-scope" => "row" , ":class": "quantity"}
        {{row.object.quantity}}
        .overlay
          %a{ "@click" => "row.object.quantity += 1; changed = true"}
            =image_tag "plus.png"
          \&nbsp;
          %span {{row.object.quantity}}
          \&nbsp;
          %a{ "@click" => "row.object.quantity -= 1; changed = true"}
            =image_tag "minus.png"
      %template{ slot: "total" , "slot-scope" => "row"}
        {{(row.object.price * row.object.quantity).toFixed(2)}}
      %template{slot: "last"}
        %th= t(:total)
        %td
        %td
        %td
          {{total_amount()}}
        %td
        %td
          = form_for(@purchase.basket) do |f|
            %span{"v-for" => "(item , index) in this.basket.items"}
              %input{hidden: true , "v-bind" => "itemProp(item,index,'id')" , "v-if"=> "item.id"}/
              %input{hidden: true , "v-bind" => "itemProp(item,index,'name')"}/
              %input{hidden: true , "v-bind" => "itemProp(item,index,'price')"}/
              %input{hidden: true , "v-bind" => "itemProp(item,index,'quantity')"}/
              %input{hidden: true , "v-bind" => "itemProp(item,index,'product_id')"}/
            = f.submit :class => "btn btn-success commit" ,"v-if" => "changed", "@click" => "submit_basket"
        %th
          {{(total_price()/ 1.24).toFixed(2)}}

  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 2}"}
    %table-component{ ":columns": "product_columns" ,
                      ":table_data": "products",
                      ":column_order": "product_order"}
      %template{ slot: "name" , "slot-scope" => "row"}
        %a{ ":href" => "'/products/' + row.object.id"}
          {{row.object.name}}
      %template{ slot: "add" , "slot-scope" => "row"}
        %a{ "@click" => "to_basket(row.object)" , "v-if" => "!in_basket(row.object)"}
          =image_tag "plus.png" , width: "30px"

  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 3}"}
    =render "orders"
.row
  .col-md-2
    = link_to( t(:back) , purchase_path(@purchase) , class: "btn btn-info")
  .col-md-2
    = link_to t(:edit) + " " + t(:basket), edit_basket_path(@purchase.basket), :class => "btn btn-info edit_basket" unless @purchase.basket.locked?
  .col-md-2
    = link_to t(:destroy) , purchase_path(@purchase), :data => { :confirm => t(:are_you_sure) }, :method => :delete, :title => t(:destroy) , :class => "btn btn-danger" unless @purchase.basket.locked?

=render "components/table"

:ruby2js
  class App < Vue
    options el: '.purchase-app'
    def initialize
      @purchase = #{@purchase.to_json(include: :supplier)}
      @tab = 1
      @changed = false
      @basket = #{ render( partial: "baskets/basket.json") }
      @basket_columns = { position: {name: "#{t(:position)}"},
                          scode: {name: "#{t(:scode)}"},
                          name: {name: "#{t(:name)}" , searchable: true },
                          quantity: {name: "#{t(:quantity)}"},
                          pack_unit: {name: "#{t(:pack_unit)}"},
                          price: {name: "#{t(:price)}"},
                          total: {name: "#{t(:total)}" , sortable: false} }
      @basket_order = [:position,:scode,:name,:quantity,:pack_unit,:price,:total]
      @products = #{ render( partial: "purchases/products.json") }
      @product_order = [ :scode , :name , :category , :inventory , :stock_level ,
                         :stock_diff , :pack_unit , :cost , :ordered , :add]
      @product_columns = {scode:      {name: "#{t(:scode)}" },
                          name:       {name: "#{t(:name)}" , searchable: true},
                          category:   {name: "#{t(:category)}" , searchable: true},
                          inventory:  {name: "#{t(:inventory)}" },
                          stock_level:{name: "#{t(:stock_level).split.first}"} ,
                          stock_diff: {name: "Diff"},
                          pack_unit:  {name: "#{t(:pack_unit)}"},
                          cost:       {name: "#{t(:cost)}"} ,
                          ordered:    {name: "#{t(:order)}"} ,
                          add:        {name: ""} }
    end
    def itemProp(item, index , prop)
      return { value: item[prop] ,
              name: 'basket[items_attributes][' + index +'][' + prop + ']',
              id: 'basket_items_attributes_' + index + '_' + prop
             }
    end
    def submit_basket(event)
      event.preventDefault()
      jQuery.post( '/baskets/' + @basket.id , jQuery(".edit_basket").serializeArray() , null , "json").
        done() { |saved_basket| @basket = saved_basket ; @changed = false }.
        fail() { console.log( "error" ) }
    end
    def orders_to_basket(_)
      @products.each { |product| self.to_basket(product) if(product.ordered) }
    end
    def products_to_basket(_)
      @products.each() {|product| self.to_basket(product) }
    end
    def to_basket(product)
      amount = product.ordered + product.stock_level - product.inventory
      return if(amount < 0)
      if(product.pack_unit > 1)
        amount = Math.ceil(amount / product.pack_unit ) * product.pack_unit
      end
      item = this.in_basket(product)
      if(item)
        @changed = true if( item.quantity != amount)
        item.quantity = amount
      else
        this.basket.items.push({ name: product.name ,
                             quantity: amount,
                                scode: product.scode,
                                price: product.cost,
                           product_id: product.id,
                            pack_unit: product.pack_unit,
                             position: product.position});
        @changed = true
      end
    end
    def in_basket(product)
      return @basket.items.find { |item| item.product_id == product.id }
    end
    def total_price(_)
      sum = 0
      @basket.items.each { |item| sum += item.price * item.quantity }
      return sum
    end
    def total_amount(_)
      sum = 0
      @basket.items.each { |item| sum += item.quantity }
      return sum
    end
  end
