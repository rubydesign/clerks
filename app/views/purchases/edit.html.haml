.row.purchase-app
  .col-md-6.purchases
    %h2= in_place @purchase , :name
  .col-md-2.pill{ "v-bind:class" => "{active_pill: tab == 1}"}
    %h4
      %a{"@click" => "tab = 1"} Basket
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 2}"}
    %h4
      %a{"@click" => "tab = 2"} Products
      \&nbsp;
      %a.right{"@click" => "products_to_basket"}
        =image_tag "plus.png" , width: "20px"
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 3}"}
    %h4
      %a{"@click" => "tab = 3"} Orders
      \&nbsp;
      %a.right{"@click" => "orders_to_basket"}
        =image_tag "plus.png" , width: "20px"

  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 1}"}
    =render "basket"
  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 2}"}
    =render "products"
  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 3}"}
    =render "orders"
.row
  .col-md-2
    = link_to( t(:back) , purchase_path(@purchase) , class: "btn btn-info")
  .col-md-2
    = link_to t(:edit) + " " + t(:basket), edit_basket_path(@purchase.basket), :class => "btn btn-info edit_basket" unless @purchase.basket.locked?

:javascript
  var app = new Vue({
    el: '.purchase-app',
    data: {
      purchase: #{@purchase.to_json(include: :supplier)},
      basket: #{ render( partial: "purchases/basket.json") },
      products: #{ render( partial: "purchases/products.json") },
      tab: 1,
      nameQuery: "",
      categoryQuery: "",
      columns: {inventory: "#{t(:inventory)}" , stock_level: "#{t(:stock_level).split.first}" ,
          stock_diff: "diff", cost: "#{t(:cost)}" ,ordered: "#{t(:order)}" },
      sortOrders: {inventory: 1, cost: 1 , stock_level: 1 , stock_diff: 1, ordered: 1},
      sortKey: "",
      changed: false
    },
    computed: {
      filteredBasket: function () {
        d = this.basket.items
        d = d.slice().sort(function (a, b) {
          a = a["position"]
          b = b["position"]
          return (a === b ? 0 : a > b ? 1 : -1) * 1
        })
        return d
      },
      filteredProducts: function () {
        data = this.products
        if (this.nameQuery) {
          query = this.nameQuery;
          data = data.filter(function(prod) {
            return prod.name.toLowerCase().indexOf(query.toLowerCase()) > -1
          })
        }
        if (this.categoryQuery) {
          query = this.categoryQuery;
          data = data.filter(function(prod) {
            return prod.category.toLowerCase().indexOf(query.toLowerCase()) > -1
          })
        }
        var order = this.sortOrders[this.sortKey] || 1
        var sortKey = this.sortKey
        if(sortKey) {
          data = data.slice().sort(function (a, b) {
            a = parseFloat(a[sortKey])
            b = parseFloat(b[sortKey])
            return (a === b ? 0 : a > b ? 1 : -1) * order
          })
        }
        return data
      }
    },
    filters: {
      capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
      }
    },
    methods: {
      itemProp: function(item, index , prop) {
        return { value: item[prop] ,
                name: 'basket[items_attributes][' + index +'][' + prop + ']',
                id: 'basket_items_attributes_' + index + '_' + prop
               }
      },
      sortBy: function (key) {
        console.log("Sortby " + key);
        this.sortKey = key;
        this.sortOrders[key] = this.sortOrders[key] * -1;
      },
      submit_basket: function(event){
        event.preventDefault();
        var that = this;
        $.post( '/baskets/' + this.basket.id , $(".edit_basket").serializeArray() , null , "json")
          .done( function( out ) {
          that.changed = false;
          console.log( out );
        }).fail(function() {
          console.log( "error" );
        });

      },
      orders_to_basket: function(){
        for(var i = 0; i < this.products.length; i++) {
          var product = this.products[i]
          if(product.ordered) this.to_basket(product)
        }
      },
      products_to_basket: function(){
        for(var i = 0; i < this.products.length; i++) {
          this.to_basket(this.products[i])
        }
      },
      to_basket: function(product){
        var amount = product.ordered + product.stock_level - product.inventory
        if(amount < 0) return
        if(product.pack_unit > 1){
          amount = Math.ceil(amount / product.pack_unit ) * product.pack_unit
        }
        var item = this.in_basket(product)
        if(item){
          if( item.quantity != amount) this.changed = true;
          item.quantity = amount
        } else {
          this.basket.items.push({ name: product.name , quantity: amount, scode: product.scode,
                      price: product.cost, product_id: product.id, position: product.position});
          this.changed = true
        }
      },
      in_basket: function(product) {
        for(var i = 0; i < this.basket.items.length; i++) {
          if(this.basket.items[i].product_id == product.id) return this.basket.items[i];
        }
        return false;
      },
      total_price: function() {
        var sum = 0;
        for(var i = 0; i < this.basket.items.length; i++) {
          sum = sum + this.basket.items[i].price * this.basket.items[i].quantity
        }
        return sum;
      },
      total_amount: function() {
        var sum = 0;
        for(var i = 0; i < this.basket.items.length; i++) {
          sum = sum + this.basket.items[i].quantity
        }
        return sum;
      }
    }
  })
