:javascript
  var allItems = #{ @items.to_json.html_safe };
-content_for :head do
  = javascript_include_tag "report"
=render "chart"
.row.new_report
  .col-md-10
    .row
      .col-md-3
        .form-group
          %select.form-control{"v-model" => "kind"  }
            %option{ value: "Order"}= t(:order)
            %option{ value: "Purchase"}= t(:purchase)
      .col-md-1
      .col-md-3
        .form-group
          %select.form-control{"v-model" => "supplier"  }
            %option{ value: ""}= t(:supplier)
            %option{ "v-for" => "s in suppliers", "v-bind:value": "s['id']" }
              {{ s['supplier_name']}}
      .col-md-1
        %a{ "@click" => "supplier = ''" , "v-if" => "supplier != ''"}
          =image_tag "minus.png" , width: "25px"
      .col-md-3
        .form-group
          %select.form-control{"v-model" => "category" }
            %option{ value: ""}= t(:category)
            %option{ "v-for" => "c in categories", "v-bind:value": "c['id']" }
              {{ c['name']}}
      .col-md-1
        %a{ "@click" => "category = ''" , "v-if" => "category != ''"}
          =image_tag "minus.png" , width: "25px"
    .row
      .col-md-2
        %span.btn.btn-info{ "@click" => "group_by = 'customer'"}
          Customers {{total_for("customer")}}
      .col-md-2
        %span.btn.btn-info
          =t(:orders)
          {{total_for("basket_id")}}
      .col-md-2
        %span.btn.btn-info{ "@click" => "group_by = 'products.supplier_id'"}
          =t(:suppliers)
          {{total_for("products.supplier_id")}}
      .col-md-2
        %span.btn.btn-info{ "@click" => "group_by = 'products.category_id'"}
          =t(:categories)
          {{total_for("products.category_id")}}
      .col-md-2
        %span.btn.btn-info{ "@click" => "group_by = 'product_id'"}
          =t(:products)
          {{total_for("product_id")}}
      .col-md-2
        %span.btn.btn-info
          {{show}} {{total_shown.toFixed(0)}}

    #placeholder{style: "width: 100%;height: 100%;"}
      %vue-chartist{":data" => "plot_data" , ":options" => "options"}
  .col-md-2
    .form-group
      .row
        .center
          %label= t("date_range")
      .row
        .col-md-2
          %a{ "@click" => "minusYear" }
            =image_tag "minus.png" , width: "25px"
        .col-md-8.center
          %a{ "@click" => "thisYear" }
            Vuosi
        .col-md-2
          %a{ "@click" => "plusYear" }
            =image_tag "plus.png" , width: "25px"
      .row
        .col-md-2
          %a{ "@click" => "minusStartMonth" }
            =image_tag "minus.png" , width: "20px"
        .col-md-8.center
          {{start.format('DD MM YYYY')}}
        .col-md-2
          %a{ "@click" => "plusStartMonth" }
            =image_tag "plus.png" , width: "20px"
      .row
        .col-md-2
          %a{ "@click" => "minusEndMonth" }
            =image_tag "minus.png" , width: "20px"
        .col-md-8.center
          {{end.format('DD MM YYYY')}}
        .col-md-2
          %a{ "@click" => "plusEndMonth" }
            =image_tag "plus.png" , width: "20px"
    .row
      .half
        %label Hinta
        %input{:type => "radio", "v-model" => "show", :value => "price"}/
      .halfl
        %label= t(:quantity)
        %input{:type => "radio", "v-model" => "show", :value => "quantity"}/
    .row
      .half
        %label= t(:month)
        %input{:type => "radio", "v-model" => "interval", :value => "month"}/
      .halfl
        %label= t(:week)
        %input{:type => "radio", "v-model" => "interval", :value => "week"}/
    .row
      .seven
        = t(:group_by)
      .threel
        %a{ "@click" => "group_by = 'all'" }
          =image_tag "minus.png" , width: "25px"
      %div
        %select.form-control{"v-model" => "group_by"  }
          %option{ "v-for" => "(g,v) in group_names", "v-bind:value": "v" }
            {{g}}
    .row{"v-for" => "pair in totals_shown"}
      %span{":class" => "'ct-series-' + String.fromCharCode(97 + group_indexes.indexOf(pair[0]))"}
        %a.seven{"@click" =>"set_group(pair[0])"}
          {{name_for(pair[0])}}
        .threel.center.ct-line
          {{pair[1].toFixed(0)}}
:ruby2js
  class Appi < Vue
    el '.new_report'

    def initialize
      @items = allItems
      @attributes = #{@attributes.to_json.html_safe}
      @categories = #{Category.all.to_json( only: [:id , :name]).html_safe}
      @suppliers = #{Supplier.all.to_json( only:  [:id , :supplier_name]).html_safe}
      @options = { fullWidth: true, height: 500, }
      @start = moment(#{@start.to_time.to_i * 1000})
      @end = moment(#{@end.to_time.to_i * 1000})
      @created_index = #{@attributes.to_json.html_safe}.indexOf("created_at")
      @group_names = #{@group_names.to_json.html_safe}
      @group_by = "all"
      @show = "price"
      @kind = "Order"
      @supplier = ""
      @category = ""
      @interval = 'week'
    end
    def plot_data
      show = @attributes.indexOf( @show )
      series = []
      Object.values(self.groups).each() do |items|
        all = self.new_group()
        items.each do |item|
          bucket = self.bucket(item)
          all[bucket] = all[bucket] + item[show]
        end
        series << Object.values(all)
      end
      return {series: series , labels: self.labels}
    end
    def buckets
      start = moment(@start)
      all = {}
      while(start < @end) do
        if( @interval == "week")
          buck = start.week()
          label = "Week " + (buck + 1)
          start.add(1,"week")
        else
          buck = start.month()
          label = start.format("MMM")
          start.add(1,"month")
        end
        all[buck] = label
      end
      return all
    end
    def labels
      Object.values(this.buckets)
    end
    def new_group(_)
      group = {}
      this.buckets.each_key { |bucket| group[bucket] = 0 }
      return group
    end
    def filteredCategories
      index = @attributes.indexOf("baskets.kori_type")
      items = self.items.select { |item| item[index] == @kind  }
      if(@supplier != "" )
        index = self.attributes.indexOf("products.supplier_id")
        items = items.select { |item| item[index] == @supplier }
      end
      return items if(@category == "" )
      index = self.attributes.indexOf("products.category_id")
      return items.select { |item| item[index] == @category  }
    end
    def groups
      items = this.filteredCategories
      return { all: items} if(@group_by == "all")
      group_by = @attributes.indexOf(@group_by)
      all = {}
      items.each do |item|
        key = item[group_by]
        series = all[ item[group_by] ] || []
        series << item
        all[ key ] = series
      end
      return all
    end
    def group_indexes
      this.groups.keys()
    end
    def total_shown
      show  = @attributes.indexOf( @show )
      return self.filteredCategories.inject(0) { |total , item| total + item[show] }
    end
    def totals_shown
      show = @attributes.indexOf( @show )
      totals = []
      self.groups.keys().each do |group|
        total =  self.groups[group].inject(0) { |total , item| total + item[show] }
        totals << [group, total]
      end
      totals = totals.slice().sort do |a, b|
        aa = parseFloat(a[1])
        bb = parseFloat(b[1])
        return aa == bb ? 0 : (aa < bb ? 1 : -1)
      end
      return totals
    end
    def total_for(attribute)
      index = @attributes.indexOf(attribute)
      all = {}
      this.filteredCategories.each { |item| all[item[index]] = 1}
      return all.keys().length
    end
    def bucket(item)
      return moment(item[@created_index]).week() if( @interval == "week")
      return moment(item[@created_index]).month()
    end
    def hash_find( hash , dat , property)
      index = parseInt(dat)
      for key in hash
        return hash[key][property] if( hash[key]["id"] == index)
      end
      console.log("Not found " + dat + " for " + property)
      return "undefined"
    end
    def set_group(g)
      if(@group_by == "products.supplier_id")
        @supplier = g
        @group_by = "all"
      end
      if(@group_by == "products.category_id")
        @category = g
        @group_by = "all"
      end
    end
    def product_name(i)
      product_index = @attributes.indexOf("product_id")
      ret = "deleted"
      @items.each do |item|
        ret = item[@attributes.indexOf("name")] if( item[product_index] == i )
      end
      return ret
    end
    def name_for(i)
      by = @group_by
      return this.hash_find(@categories, i , "name") if( by == "products.category_id")
      return this.hash_find(@suppliers, i , "supplier_name") if( by == "products.supplier_id")
      return i.replace("@", " @ ") if( by == "customer")
      return this.product_name(i) if( by == "product_id")
      return "all"
    end
    def loadData(_)
      @start = moment(@start)
      @end = moment(@end)
      jQuery.getJSON("/manage/reports.json" ,
        { start: @start.unix() , end: @end.unix() }) do
         |ret| @items = ret
        end
    end
    def plusStartMonth(_)
      @start.add(5,"week").startOf("month")
      this.loadData()
    end
    def minusStartMonth(_)
      this.start.subtract(1,"week").startOf("month")
      this.loadData()
    end
    def plusEndMonth(_)
      this.end.add(1,"week").endOf("month")
      this.loadData()
    end
    def minusEndMonth(_)
      @end.subtract(5,"week").endOf("month")
      this.loadData()
    end
    def thisYear(_)
      @start.startOf("year")
      @end.endOf("year")
      this.loadData()
    end
    def minusYear(_)
      @start.subtract(50,"week").startOf("month")
      @end.subtract(54,"week").endOf("month")
      this.loadData()
    end
    def plusYear(_)
      @start.add(54,"week").startOf("month")
      @end.add(50,"week").endOf("month")
      this.loadData()
    end
  end
